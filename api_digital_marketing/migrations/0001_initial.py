# Generated by Django 2.1.15 on 2020-02-17 12:23

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Calendar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.TextField(blank=True, db_column='Date', null=True)),
                ('day', models.IntegerField(blank=True, db_column='Day', null=True)),
                ('month', models.IntegerField(blank=True, db_column='Month', null=True)),
                ('firstofmonth', models.TextField(blank=True, db_column='FirstOfMonth', null=True)),
                ('monthname', models.TextField(blank=True, db_column='MonthName', null=True)),
                ('week', models.IntegerField(blank=True, db_column='Week', null=True)),
                ('isoweek', models.IntegerField(blank=True, db_column='ISOWeek', null=True)),
                ('dayofweek', models.IntegerField(blank=True, db_column='DayOfWeek', null=True)),
                ('quarter', models.IntegerField(blank=True, db_column='Quarter', null=True)),
                ('year', models.IntegerField(blank=True, db_column='Year', null=True)),
                ('firstofyear', models.TextField(blank=True, db_column='FirstOfYear', null=True)),
            ],
            options={
                'db_table': 'calendar',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('companyid', models.IntegerField(db_column='CompanyID', primary_key=True, serialize=False)),
                ('companyname', models.TextField(blank=True, db_column='CompanyName', null=True)),
            ],
            options={
                'db_table': 'company',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metricattribute',
            fields=[
                ('metricattributeid', models.IntegerField(db_column='MetricAttributeID', primary_key=True, serialize=False)),
                ('metricattribute', models.TextField(blank=True, db_column='MetricAttribute', null=True)),
                ('companyid', models.IntegerField(blank=True, db_column='CompanyID', null=True)),
                ('label', models.TextField(blank=True, db_column='Label', null=True)),
            ],
            options={
                'db_table': 'metricattribute',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metricattributevalueblob',
            fields=[
                ('metricattributevalueblogid', models.IntegerField(db_column='MetricAttributeValueBlogID', primary_key=True, serialize=False)),
                ('metricattributeid', models.IntegerField(blank=True, db_column='MetricAttributeID', null=True)),
                ('metricattributevalue', models.TextField(blank=True, db_column='MetricAttributeValue', null=True)),
            ],
            options={
                'db_table': 'metricattributevalueblob',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metricattributevaluedecimal',
            fields=[
                ('metricattributevaluedecimalid', models.IntegerField(db_column='MetricAttributeValueDecimalID', primary_key=True, serialize=False)),
                ('metricattributevalue', models.FloatField(blank=True, db_column='MetricAttributeValue', null=True)),
                ('date', models.TextField(blank=True, db_column='Date', null=True)),
            ],
            options={
                'db_table': 'metricattributevaluedecimal',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metricattributevalueint',
            fields=[
                ('metricattributevalueintid', models.IntegerField(db_column='MetricAttributeValueINTID', primary_key=True, serialize=False)),
                ('metricattributeid', models.IntegerField(blank=True, db_column='MetricAttributeID', null=True)),
                ('metricattributevalue', models.IntegerField(blank=True, db_column='MetricAttributeValue', null=True)),
                ('date', models.TextField(blank=True, db_column='Date', null=True)),
            ],
            options={
                'db_table': 'metricattributevalueint',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metricattributevaluestring',
            fields=[
                ('metricattributevaluestringid', models.IntegerField(db_column='MetricAttributeValueStringID', primary_key=True, serialize=False)),
                ('metricattributevalue', models.TextField(blank=True, db_column='MetricAttributeValue', null=True)),
                ('date', models.TextField(blank=True, db_column='Date', null=True)),
            ],
            options={
                'db_table': 'metricattributevaluestring',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metricsource',
            fields=[
                ('metricsourceid', models.IntegerField(db_column='MetricSourceID', primary_key=True, serialize=False)),
                ('metricsource', models.TextField(blank=True, db_column='MetricSource', null=True)),
                ('metricformat', models.TextField(blank=True, db_column='MetricFormat', null=True)),
                ('companyid', models.IntegerField(blank=True, db_column='CompanyID', null=True)),
            ],
            options={
                'db_table': 'metricsource',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Metrictype',
            fields=[
                ('metrictypeid', models.IntegerField(db_column='MetricTypeID', primary_key=True, serialize=False)),
                ('metrictype', models.TextField(blank=True, db_column='MetricType', null=True)),
            ],
            options={
                'db_table': 'metrictype',
                'managed': False,
            },
        ),
    ]
